<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Reset</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        .validation-list {
            list-style-type: none;
            padding-left: 0;
        }
        .validation-list li {
            color: red;
        }
        .validation-list li.valid {
            color: green;
        }
        .password-field {
            position: relative;
        }
        .toggle-password {
            position: absolute;
            right: 10px;
            top: 70%;
            transform: translateY(-50%);
            cursor: pointer;
        }
    </style>
</head>
<body>

<!-- Modal for Password Reset -->
<div class="modal fade show" id="resetPasswordModal" tabindex="-1" aria-labelledby="resetPasswordModalLabel" aria-modal="true" role="dialog" style="display: block;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="resetPasswordModalLabel">Reset Password</h5>
            </div>
            <div class="modal-body">
                <!-- Password Requirements Text -->
                <p class="text-muted">Password must meet the following requirements:</p>
                <ul class="validation-list" id="passwordValidationList">
                    <li id="charLength" class="invalid">At least 8 characters long</li>
                    <li id="uppercaseLetter" class="invalid">At least one uppercase letter</li>
                    <li id="number" class="invalid">At least one number</li>
                    <li id="specialChar" class="invalid">At least one special character (-,@, $, !, %, *, ?, &)</li>
                </ul>

                <!-- Password Reset Form -->
                <form id="resetPasswordForm">
                    <div class="mb-3 password-field">
                        <label for="newPassword" class="form-label">New Password</label>
                        <input type="password" class="form-control" id="newPassword" placeholder="Enter new password" required>
                        <i class="toggle-password bi bi-eye" id="toggleNewPassword" onclick="togglePasswordVisibility('newPassword', 'toggleNewPassword')"></i>
                    </div>
                    <div class="mb-3 password-field">
                        <label for="confirmPassword" class="form-label">Confirm New Password</label>
                        <input type="password" class="form-control" id="confirmPassword" placeholder="Confirm new password" required>
                        <i class="toggle-password bi bi-eye" id="toggleConfirmPassword" onclick="togglePasswordVisibility('confirmPassword', 'toggleConfirmPassword')"></i>
                    </div>
                    <div id="errorMessage" class="text-danger mb-3" style="display:none;"></div>
                    <button type="submit" class="btn btn-primary" disabled id="submitBtn">Reset Password</button>
                </form>
            </div>

            <!-- Modal footer with request password reset link -->
            <div class="modal-footer">
                <a href="/request-password-reset" class="text-primary">Request a new password reset</a>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    // Open the modal automatically on page load
    var resetPasswordModal = new bootstrap.Modal(document.getElementById('resetPasswordModal'));
    resetPasswordModal.show();

    // Get the token from the URL query parameters
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');

    const newPasswordInput = document.getElementById('newPassword');
    const submitBtn = document.getElementById('submitBtn');

    const validationCriteria = {
        charLength: /^(?=.{8,})/,        // At least 8 characters long
        uppercaseLetter: /^(?=.*[A-Z])/, // At least one uppercase letter
        number: /^(?=.*\d)/,             // At least one number
        specialChar: /^(?=.*[-@$!%*?&])/, // At least one special character
    };

    // Real-time password validation while typing
    newPasswordInput.addEventListener('input', function () {
        const password = newPasswordInput.value;

        // Check each validation rule
        validatePassword(password);
        
        // Enable or disable the submit button based on validation
        const allValid = Object.keys(validationCriteria).every((criteria) => {
            return validationCriteria[criteria].test(password);
        });
        submitBtn.disabled = !allValid;
    });

    function validatePassword(password) {
        const charLength = document.getElementById('charLength');
        const uppercaseLetter = document.getElementById('uppercaseLetter');
        const number = document.getElementById('number');
        const specialChar = document.getElementById('specialChar');

        // Check for each validation and update the corresponding UI element
        updateValidationStatus(validationCriteria.charLength, password, charLength);
        updateValidationStatus(validationCriteria.uppercaseLetter, password, uppercaseLetter);
        updateValidationStatus(validationCriteria.number, password, number);
        updateValidationStatus(validationCriteria.specialChar, password, specialChar);
    }

    function updateValidationStatus(pattern, value, element) {
        if (pattern.test(value)) {
            element.classList.remove('invalid');
            element.classList.add('valid');
        } else {
            element.classList.remove('valid');
            element.classList.add('invalid');
        }
    }

    // Password reset form submission handler
    document.getElementById('resetPasswordForm').addEventListener('submit', async function (event) {
        event.preventDefault(); // Prevent form from submitting normally

        // Get password values
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        const errorMessage = document.getElementById('errorMessage');

        // Check if passwords match
        if (newPassword !== confirmPassword) {
            errorMessage.textContent = "Passwords do not match!";
            errorMessage.style.display = "block";
            return;
        }

        // Hide error message if passwords are valid
        errorMessage.style.display = "none";

        try {
            // Send API request to reset password
            const response = await fetch('/auth/reset-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ token: token, newPassword: newPassword })
            });

            const result = await response.json();

            // Check for API errors
            if (!response.ok) {
                throw new Error(result.message || "An error occurred");
            }

            // Redirect to homepage on success
            window.location.href = '/?message=Login%20with%20new%20password';
        } catch (error) {
            // Show error message
            errorMessage.textContent = error.message;
            errorMessage.style.display = "block";
        }
    });
});

// Toggle password visibility function
function togglePasswordVisibility(passwordFieldId, toggleIconId) {
    const passwordField = document.getElementById(passwordFieldId);
    const toggleIcon = document.getElementById(toggleIconId);

    // Toggle between text and password type
    if (passwordField.type === "password") {
        passwordField.type = "text";
        toggleIcon.classList.remove('bi-eye');
        toggleIcon.classList.add('bi-eye-slash');
    } else {
        passwordField.type = "password";
        toggleIcon.classList.remove('bi-eye-slash');
        toggleIcon.classList.add('bi-eye');
    }
}

document.getElementById('resetPasswordForm').addEventListener('keypress', function(event) {
    if (event.key === 'Enter') {
      handleResetPassword();
    }
  });

</script>

<!-- Bootstrap Icons for eye/eye-slash icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css">

</body>
</html>
